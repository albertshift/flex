option java_package = "alt.flex.protocol";

option java_outer_classname = "FlexProtocol";

message Request {
  optional int64 timeoutSeq = 1;
  optional int32 requestNum = 2;
  optional RequestType requestType = 3; 
  optional InitParams init = 4;
  repeated Operation operation = 5;
  optional bool enableTrace = 6;
}

enum RequestType {
  INIT = 1;              // InitParams
  OPERATION = 2;         // Operation
  CANCEL_OPERATION = 3;  // No Payload
}

message Operation {
  optional int32 storeId = 1;
  optional OperationType operationType = 2;
  repeated KeyValuePair keyValue = 3;
}

enum OperationType {
  GET = 1;           // KeyValuePair
  PUT = 2;           // KeyValuePair
  REMOVE = 3;        // KeyValuePair
  CLEAR = 4;         // No Payload
  SIZE = 5;          // No Payload
}

message InitParams {
  optional int32 version = 1;
  optional UUID clientId = 2;
  optional int64 initSeq = 3;
  optional bool getStores = 4;
  repeated KeyValuePair props = 5;
}

message UUID {
  optional int64 mostSigBits = 1;
  optional int64 leastSigBits = 2;
}

message KeyValuePair {
  optional string key = 1; 
  optional bytes value = 2; 
}

message Response {
  optional int64 timeoutSeq = 1;
  optional int32 requestNum = 2;
  optional ResponseType responseType = 3; 
  optional ServerParams serverParams = 4;
  repeated StoreInformation store = 5;
  repeated OperationResult result = 6;
  optional ResponseTrace trace = 7;
}

enum ResponseType {
  HEART_BREATH = 0;        // No Payload
  INITED = 1;              // StoreInformation or empty
  OPERATION_RESULT = 2;    // OperationResult
}

message ServerParams {
  optional int32 heartBreathIntervalMls = 1;
}

message ResponseTrace {
  optional int64 waitNanos = 1;
  repeated int64 operationExecNanos = 2;
}

message StoreInformation {
  optional int32 storeId = 1;
  optional string name = 2;
}

message OperationResult {
  optional ReturnType returnType = 1;
  repeated ValueOrNull value = 2;
  optional ErrorInformation error = 3;
}

enum ReturnType {
  NOTHING = 0;
  SINGLE_VALUE = 1;
  MULTIPLE_VALUES = 2;
  ERROR_OR_EXCEPTION = 3;
}

message ValueOrNull {
  optional bytes value = 1;
  optional int64 longValue = 2;
}

message ErrorInformation {
  optional int32 code = 1;
  optional string message = 2;
  optional string className = 3;
  optional string stackTrace = 4;
}

